////////////////////////////////////////////////////////////////////////////////
#Область ОписаниеПеременных

&НаКлиенте
перем КэшСостоянияДерева;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	СписокТипов = Список.КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Ссылка")).Тип;
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = СписокТипов;
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ФормаКоманднаяПанель;
	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Если Не ЗначениеЗаполнено(ВывестиЦелиСтатусом) Тогда	
		ВывестиЦелиСтатусом = "Все";
	КонецЕсли; 

	// когда форма открывается в режиме выбора, Структура предприятия всегда передана
	
	Параметры.Свойство("СтруктураПредприятия", ПредопределенныйОтбор);	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры      

////////////////////////////////////////////////////////////////////////////////
//
// Процедура ПодготовитьФормуНаСервере
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//  
&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПринадлежностьЦели", ПредопределенныйОтбор,
																				ВидСравненияКомпоновкиДанных.ВИерархии, "ПринадлежностьЦели", ЗначениеЗаполнено(ПредопределенныйОтбор));	

	ЗаполнитьОтборДереваПринадлежностей();
	ЗаполнитьОтборДереваГрупп(); 
	
	ЗаполнитьСписокПоПринадлежности();
	СкопироватьДерево("СписокПоПринадлежности");
	
	УстановитьУсловноеОформление();
	
	Элементы.СтатусЦели.СписокВыбора.Добавить("Все", "Все");
	Элементы.СтатусЦели.СписокВыбора.Добавить(Перечисления.УБ_СостоянияПоказателейЭффективности.Действует, "Действует");
	Элементы.СтатусЦели.СписокВыбора.Добавить(Перечисления.УБ_СостоянияПоказателейЭффективности.Планируется, "Планируется");
	Элементы.СтатусЦели.СписокВыбора.Добавить(Перечисления.УБ_СостоянияПоказателейЭффективности.Архивный, "Архивный");

КонецПроцедуры //ПодготовитьФормуНаСервере



&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	УправлениеВидимостью();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("ОтборПриАктивизацииСтрокиНаКлиенте", 0.1, Истина);	
КонецПроцедуры   

#КонецОбласти
          
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПереключитьРежимСпискаЦелей(Команда)
	
	РежимСпискаЦелейПоГруппам = Не РежимСпискаЦелейПоГруппам;
	Элементы.ФормаПереключитьРежимСпискаЦелей.Заголовок = ?(Не РежимСпискаЦелейПоГруппам, "По группам", "По принадлежности");
	УправлениеВидимостью();
	
КонецПроцедуры       

&НаКлиенте
Процедура Создать(Команда)
    ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Родитель", 
							?(Не ОтборГруппыТекущая = Неопределено,
							ОтборГруппыТекущая, 
							Неопределено));
	ПараметрыФормы.Вставить("ПринадлежностьЦели", 
							?(ЭтоНазначениеЦели(Элементы.СписокПоПринадлежности.ТекущиеДанные.Значение),
							Элементы.СписокПоПринадлежности.ТекущиеДанные.Значение, 
							СписокПоПринадлежности.НайтиПоИдентификатору(Элементы.СписокПоПринадлежности.ТекущаяСтрока).ПолучитьРодителя().Значение));							 //!!! значение уровнем выше
							
	ОткрытьФорму("Справочник.УБ_Цели.Форма.ФормаЭлемента", ПараметрыФормы, Элементы.СписокПоПринадлежности);
КонецПроцедуры           

&НаКлиенте
Процедура СоздатьГруппу(Команда)   
	ПараметрыФормы = Новый Структура("ЭтоГруппа", Истина);
	ОткрытьФорму("Справочник.УБ_Цели.Форма.ФормаГруппы", ПараметрыФормы, Элементы.ДеревоГрупп);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭлементКопированием(Команда)  
	
	ИсходныйЭлемент =  Элементы.СписокПоПринадлежности.ТекущиеДанные.Значение;
	ОткрытьФорму(УБ_ОбщегоНазначенияКлиентВызовСервера.ПолучитьИмяФормыПоСсылке(ИсходныйЭлемент),
				 Новый Структура("ЗначениеКопирования", ИсходныйЭлемент), 
				 Элементы.СписокПоПринадлежности);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьСпискиОтборов(Команда)
	ЗаполнитьОтборДереваПринадлежностей();
	ЗаполнитьОтборДереваГрупп();
КонецПроцедуры

#Область СтандартныеПодсистемы_ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок 

#Область ОбслуживаниеОтборовИерархии

&НаСервере
Процедура ЗаполнитьОтборДереваПринадлежностей(ПринадлежностьТекущейСтроки = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	Дерево = ДеревоПринадлежностей();
	ЗначениеВРеквизитФормы(Дерево, "ОтборПринадлежности");
	УстановитьПривилегированныйРежим(Ложь);
	
	ИдентификаторСтроки = Неопределено;
	Если ЗначениеЗаполнено(ПредопределенныйОтбор) Тогда
		ИдентификаторСтроки = ИдентификаторСтрокиДереваПоЗначению(ОтборПринадлежности, ПредопределенныйОтбор);	
	ИначеЕсли ПринадлежностьТекущейСтроки <> Неопределено Тогда
		ИдентификаторСтроки = ИдентификаторСтрокиДереваПоЗначению(ОтборПринадлежности, ПринадлежностьТекущейСтроки);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		Элементы.ОтборПринадлежности.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры  

&НаСервере
Процедура ЗаполнитьОтборДереваГрупп(ГруппаТекущейСтроки = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	Дерево = ДеревоГрупп();
	ЗначениеВРеквизитФормы(Дерево, "ОтборГрупп");
	УстановитьПривилегированныйРежим(Ложь);
	
	ИдентификаторСтроки = Неопределено;
	Если ГруппаТекущейСтроки <> Неопределено Тогда
		ИдентификаторСтроки = ИдентификаторСтрокиДереваПоЗначению(ОтборГрупп, ГруппаТекущейСтроки);
	КонецЕсли;
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		Элементы.ОтборГрупп.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает дерево используемых принадлежностей целей.
// 
// Возвращаемое значение:
//  ДеревоЗначений - дерево используемых категорий.
//  
&НаСервере
Функция ДеревоПринадлежностей() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Цели.ПринадлежностьЦели КАК Значение,
	|	Цели.ПринадлежностьЦели.Наименование КАК Представление,
	|	Цели.ПринадлежностьЦели.ПометкаУдаления КАК ПометкаУдаления,
	|	ЛОЖЬ КАК ЭтоГруппа,
	|	ВЫБОР
	|		КОГДА Цели.ПринадлежностьЦели.ПометкаУдаления
	|			ТОГДА 5
	|		ИНАЧЕ 4
	|	КОНЕЦ КАК Картинка,
	|	ВЫБОР
	|		КОГДА Цели.ПринадлежностьЦели <> ЗНАЧЕНИЕ(Справочник.УБ_Компании.Компания)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.УБ_Цели КАК Цели
	|ГДЕ
	|	НЕ Цели.ПринадлежностьЦели ЕСТЬ NULL
	|   и &УсловиеОтбора
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	Представление";
	
	
	Если ЗначениеЗаполнено(ПредопределенныйОтбор) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "и &УсловиеОтбора", "И Цели.ПринадлежностьЦели В Иерархии (&ПредопределенныйОтбор)");
		Запрос.УстановитьПараметр("ПредопределенныйОтбор", ПредопределенныйОтбор);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "и &УсловиеОтбора", "");	
	КонецЕсли;
	
	//TODO ООО 27.06.2023 исключить те же группы (применить СКД), тогда можно получить иерархию
	//|ИТОГИ ПО
	//|	Цели.ПринадлежностьЦели ИЕРАРХИЯ";
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Если Не ЗначениеЗаполнено(ПредопределенныйОтбор) и Дерево.Строки.Количество() > 0 Тогда
		
		СтрокаВсе = Дерево.Строки.Вставить(0);
		СтрокаВсе.Значение = Неопределено;
		СтрокаВсе.Представление = НСтр("ru='<Все>'");

	КонецЕсли;
	
	Возврат Дерево;
	
КонецФункции 

 
// Возвращаемое значение:
//  ДеревоЗначений - дерево используемых Групп целей.
  
&НаСервере
Функция ДеревоГрупп() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Цели.Ссылка КАК Значение,
	|	Цели.Наименование КАК Представление,
	|	Цели.ПометкаУдаления КАК ПометкаУдаления,
	|	Цели.ЭтоГруппа КАК ЭтоГруппа, 
	|	ВЫБОР
	|		КОГДА НЕ Цели.ЭтоГруппа
	|			ТОГДА ВЫБОР
	|					КОГДА Цели.ПометкаУдаления
	|						ТОГДА 5
	|					ИНАЧЕ 4
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Цели.ПометкаУдаления
	|					ТОГДА 2
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК Картинка
	|ИЗ
	|	Справочник.УБ_Цели КАК Цели
	|ГДЕ
	|	Цели.ЭтоГруппа 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Цели.ЭтоГруппа ИЕРАРХИЯ,
	|	Цели.РеквизитДопУпорядочивания,
	|	Цели.Наименование";  
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Если Дерево.Строки.Количество() > 0 Тогда
		СтрокаВсе = Дерево.Строки.Вставить(0);
		СтрокаВсе.Значение = Неопределено;
		СтрокаВсе.Представление = НСтр("ru='<Все>'");
	КонецЕсли;
	
	Возврат Дерево;
	
КонецФункции 

&НаСервере
Функция ИдентификаторСтрокиДереваПоЗначению(Коллекция, ИскомоеЗначение)
	
	КоллекцияЭлементов = Коллекция.ПолучитьЭлементы();
	
	Для каждого Элемент Из КоллекцияЭлементов Цикл
		
		Если Элемент.Значение = ИскомоеЗначение Тогда
			Возврат Элемент.ПолучитьИдентификатор();
		КонецЕсли;
		
		Идентификатор = ИдентификаторСтрокиДереваПоЗначению(Элемент, ИскомоеЗначение);
		
		Если Идентификатор <> Неопределено Тогда
			Возврат Идентификатор;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции


&НаКлиенте
Процедура ОтборПринадлежностиПриАктивизацииСтроки(Элемент)

	Если ОтборИерархияПереключатель <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ОтборПринадлежности.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтборПринадлежностиТекущая = Элементы.ОтборПринадлежности.ТекущиеДанные.Значение Тогда
		Возврат;
	КонецЕсли;

	Если Элемент = Неопределено Тогда
		ОтборПриАктивизацииСтрокиНаКлиенте();
	Иначе
		ПодключитьОбработчикОжидания("ОтборПриАктивизацииСтрокиНаКлиенте", 0.2, Истина);
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.ОтборПринадлежности;

КонецПроцедуры    

&НаКлиенте
Процедура ОтборГруппПриАктивизацииСтроки(Элемент)

	Если ОтборИерархияПереключатель = 0 Тогда
		Если Элементы.ДеревоГрупп.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		Если ОтборГруппыТекущая = Элементы.ДеревоГрупп.ТекущиеДанные.Значение Тогда
			Возврат;
		КонецЕсли;   
	Иначе  
		Если Элементы.ОтборПринадлежности.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		Если ОтборПринадлежностиТекущая = Элементы.ОтборПринадлежности.ТекущиеДанные.Значение Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;

	Если Элемент = Неопределено Тогда
		ОтборПриАктивизацииСтрокиНаКлиенте();
	Иначе
		ПодключитьОбработчикОжидания("ОтборПриАктивизацииСтрокиНаКлиенте", 0.2, Истина);
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.ДеревоГрупп;
	
КонецПроцедуры


&НаСервере
Процедура ОбработкаЗаписиНового(НовыйОбъект, Значение, СтандартнаяОбработка)

	ЗаполнитьСписокПоПринадлежности();
	СкопироватьДерево("СписокПоПринадлежности");
	
	ЗаполнитьОтборДереваПринадлежностей();
	ЗаполнитьОтборДереваГрупп();

КонецПроцедуры

&НаКлиенте
Процедура ОтборИерархияПереключательПриИзменении(Элемент)
	УправлениеВидимостью();	
	ПодключитьОбработчикОжидания("ОтборПриАктивизацииСтрокиНаКлиенте", 0.1, Истина);	
КонецПроцедуры


&НаКлиенте
Процедура ОтборПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
		
	//структуру не перетаскиваем
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	
КонецПроцедуры


//////////////////////////////////////////////

&НаКлиенте
Процедура ОтборПриАктивизацииСтрокиНаКлиенте() 
	
	СохранитьСостояниеДерева();	
	
	Если ОтборИерархияПереключатель = 0 Тогда
		
		ОтборПринадлежностиТекущая = Неопределено;
		Если Элементы.ДеревоГрупп.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОтборГруппыТекущая = Элементы.ДеревоГрупп.ТекущиеДанные.Значение; 
		
	ИначеЕсли ОтборИерархияПереключатель = 1 Тогда
		
		ОтборГруппыТекущая = Неопределено;
		Если Элементы.ОтборПринадлежности.ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОтборПринадлежностиТекущая = Элементы.ОтборПринадлежности.ТекущиеДанные.Значение; 
		
	КонецЕсли;
	
	УстановитьОтборСписка();   
	ВосстановитьСостояниеДерева();

КонецПроцедуры   

&НаКлиенте
Процедура СохранитьСостояниеДерева(Дерево = Неопределено, ДеревоНаКлиенте = Неопределено)      
	
	Если Дерево = Неопределено Тогда 
		Если РежимСпискаЦелейПоГруппам Тогда
			Дерево = Список;
	   		ДеревоНаКлиенте = Элементы.Список;
		Иначе               
			Дерево = СписокПоПринадлежности;
			ДеревоНаКлиенте = Элементы.СписокПоПринадлежности;
		КонецЕсли;                                  	
	КонецЕсли;
	
	Если РежимСпискаЦелейПоГруппам Тогда
		//Для каждого Строка Из Дерево.Строки Цикл	//только верхний уровень
		//	ИдентификаторСтроки = Строка.ПолучитьИдентификатор();	
		//	КэшСостоянияДерева.Вставить(Строка.Значение, ДеревоНаКлиенте.Развернут(ИдентификаторСтроки));
		//	СохранитьСостояниеДерева(Строка, ДеревоНаКлиенте);
		//КонецЦикла;
	Иначе
		Для каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();	
			КэшСостоянияДерева.Вставить(Строка.Значение, ДеревоНаКлиенте.Развернут(ИдентификаторСтроки));
			СохранитьСостояниеДерева(Строка, ДеревоНаКлиенте);
		КонецЦикла;
		
	КонецЕсли;

		
КонецПроцедуры  

&НаКлиенте
Процедура ВосстановитьСостояниеДерева()      
	
	Если РежимСпискаЦелейПоГруппам Тогда    
		// пока что сохранение состояния для динамического списка не предусмотрено - работают механизмы платформы
		Возврат;
		Дерево = Список;
   		ДеревоНаКлиенте = Элементы.Список;
	Иначе               
		Дерево = СписокПоПринадлежности;
		ДеревоНаКлиенте = Элементы.СписокПоПринадлежности;
	КонецЕсли;                                            

	Для каждого Строка Из КэшСостоянияДерева Цикл
		НайденноеЗначение = ИдентификаторСтрокиДереваПоЗначению(Дерево, Строка.Ключ);
		Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
			Если Строка.Значение Тогда
				 ДеревоНаКлиенте.Развернуть(НайденноеЗначение);		
			Иначе
				 ДеревоНаКлиенте.Свернуть(НайденноеЗначение);		
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры     
	
	// Устанавливает отбор списка номенклатуры по выбранной категории.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения - Форма объекта-владельца, в котором требуется установить отбор номенклатуры по категории.
//  Список				 - ДинамическийСписок - Список на форме.
//  ВыбраннаяПринадлежность	 - СправочникСсылка.ПринадлежностиНоменклатуры - Принадлежность, по которой требуется установить отбор.
//
Процедура УстановитьОтборПоПринадлежности(Форма, Список, ВыбраннаяПринадлежность) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВыбраннаяПринадлежность) Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
			Список.КомпоновщикНастроек.Настройки.Отбор,,
			"ОтборПоПринадлежности");
		Возврат;
		
	КонецЕсли;
	
	ГруппаОтборПоПринадлежности = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.КомпоновщикНастроек.Настройки.Отбор.Элементы,
		"ОтборПоПринадлежности",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоПринадлежности,
		"ПринадлежностьЦели",
		ВидСравненияКомпоновкиДанных.Равно,
		ВыбраннаяПринадлежность,
		"ОтборПоПринадлежности",
		ЗначениеЗаполнено(ВыбраннаяПринадлежность));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоПринадлежности,
		"ПринадлежностьЦели",
		ВидСравненияКомпоновкиДанных.ВИерархии,
		ВыбраннаяПринадлежность,
		"ОтборПоПринадлежностиВИерархии",
		ЗначениеЗаполнено(ВыбраннаяПринадлежность));
	
КонецПроцедуры

/////////////////////////////////////////////

#КонецОбласти



&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
КонецПроцедуры

&НаСервере
Процедура ВывестиПоказателиВАрхивеПриИзмененииНаСервере()
	Если РежимСпискаЦелейПоГруппам Тогда
		//!!! УстановитьОтборСписка();	
	Иначе
		// обновить все дерево
		ЗаполнитьСписокПоПринадлежности();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПоказателиВАрхивеПриИзменении(Элемент)
	СохранитьСостояниеДерева();
	ВывестиПоказателиВАрхивеПриИзмененииНаСервере();
	ВосстановитьСостояниеДерева();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикисобытийЭлементовТаблицыФормыСписокПоПринадлежности

&НаКлиенте 
Процедура СписокПоПринадлежностиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(, Элементы.СписокПоПринадлежности.ТекущиеДанные.Значение);
КонецПроцедуры  

&НаКлиенте
Процедура СписокПоПринадлежностиОбработкаЗаписиНового(НовыйОбъект, Значение, СтандартнаяОбработка)
	ДобавитьЭлементВДеревоНаСервере(НовыйОбъект);
КонецПроцедуры 

&НаКлиенте
Процедура ДеревоГруппОбработкаЗаписиНового(НовыйОбъект, Значение, СтандартнаяОбработка)
	ЗаполнитьОтборДереваГрупп();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоГруппОбработкаЗапросаОбновления()
	ЗаполнитьОтборДереваГрупп();
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементВДеревоНаСервере(НовыйОбъект) 
	
	Дерево = ДанныеФормыВЗначение(СписокПоПринадлежности, Тип("ДеревоЗначений"));
	Строка = Дерево.Строки.Найти(НовыйОбъект.ПринадлежностьЦели,, Истина); 
	НовСтр = Строка.Строки.Добавить();
	НовСтр.Значение = НовыйОбъект;
	НовСтр.Картинка = ?(НовыйОбъект.ПометкаУдаления, 5,4);
	ЗначениеВДанныеФормы(Дерево, СписокПоПринадлежности);
	
	ИдентификаторСтроки = ИдентификаторСтрокиДереваПоЗначению(СписокПоПринадлежности, НовыйОбъект);
		
	Если ИдентификаторСтроки <> Неопределено Тогда
		Элементы.СписокПоПринадлежности.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


Процедура УправлениеВидимостью()                        
	
	//Элементы.ГруппаВыбора.Видимость = РежимСпискаЦелейПоГруппам;
	
	Элементы.ДеревоГрупп.Видимость = ОтборИерархияПереключатель = 0;
	Элементы.ОтборПринадлежности.Видимость = ОтборИерархияПереключатель = 1;
	
	Элементы.Список.Видимость = ОтборИерархияПереключатель = 0;
	Элементы.СписокПоПринадлежности.Видимость = ОтборИерархияПереключатель = 1;
		
	//   Если ОтборИерархияПереключатель = 1 Тогда
	//	Элементы.ОтборПринадлежности.ТекущаяСтрока = 0;
	//ИначеЕсли ОтборИерархияПереключатель = 0 Тогда
	//	Элементы.ДеревоГрупп.ТекущаяСтрока = 0;
	//КонецЕсли;
	
	Элементы.ФормаПереключитьРежимСпискаЦелей.Заголовок = ?(Не РежимСпискаЦелейПоГруппам, "По группам", "По принадлежности");
	Элементы.Список.Видимость = РежимСпискаЦелейПоГруппам;
	Элементы.СписокПоПринадлежности.Видимость = Не РежимСпискаЦелейПоГруппам;

КонецПроцедуры //УправлениеВидимостью

&НаСервере
Процедура ЗаполнитьСписокПоПринадлежности()

	// Получение макета СКД.
	СхемаКомпоновкиДанных =  Справочники.УБ_Цели.ПолучитьМакет("ДеревоПринадлежностей");
	
	 //Инициализация компоновщиков.
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;      
	

	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	мСписок = Новый Массив;
	мСписок.Добавить(Справочники.СтруктураПредприятия.ПустаяСсылка());
	мСписок.Добавить(Справочники.УБ_Компании.Компания);
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачальноеЗначение", мСписок);
	
	Если Не ВывестиЦелиСтатусом = "Все" Тогда
		
		ГруппаЭлементовОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		НовыйЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("Статус");
	    НовыйЭлементОтбора.ЛевоеЗначение =  ПолеОтбора;
	    НовыйЭлементОтбора.Использование = Истина;
	    НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	    НовыйЭлементОтбора.ПравоеЗначение = ВывестиЦелиСтатусом; 
		
		НовыйЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных("Статус");
	    НовыйЭлементОтбора.ЛевоеЗначение =  ПолеОтбора;
	    НовыйЭлементОтбора.Использование = Истина;
	    НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	    НовыйЭлементОтбора.ПравоеЗначение = Перечисления.УБ_СостоянияПоказателейЭффективности.ПустаяСсылка();
	КонецЕсли;      
	
	//Если ЗначениеЗаполнено(ПредопределенныйОтбор) Тогда
	//	НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//	ПолеОтбора = Новый ПолеКомпоновкиДанных("Значение");
	//    НовыйЭлементОтбора.ЛевоеЗначение =  ПолеОтбора;
	//    НовыйЭлементОтбора.Использование = Истина;
	//    НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
	//    НовыйЭлементОтбора.ПравоеЗначение = ПредопределенныйОтбор; 
	//КонецЕсли;

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
													КомпоновщикНастроек.Настройки,,,
													Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
													
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки); 
	
	// Подготовка и заполнение дерева иерархии.
	ДеревоИерархии = Новый ДеревоЗначений;
	
	ПроцессорВывода = Новый  ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоИерархии);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);    
	
	ЗначениеВРеквизитФормы(ДеревоИерархии, "СписокПоПринадлежности");

КонецПроцедуры

//&НаСервере
&НаКлиенте
Процедура УстановитьОтборСписка()  
	
	ЗаданиеВыполнено = УстановитьОтборСпискаВФоне(ЭтотОбъект);
	 Если ЗаданиеВыполнено Тогда
		 Возврат;
	 КонецЕсли;
	 // Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	 ПараметрыОбработчикаОжидания = Новый Структура(
	 "МинимальныйИнтервал,
	 |МаксимальныйИнтервал,
	 |ТекущийИнтервал,
	 |КоэффициентУвеличенияИнтервала", 
	 1, 15, 1, 1.4);
	 ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	 ФормаДлительнойОперации = ОткрытьФорму("ОбщаяФорма.ДлительнаяОперация",
	 Новый Структура("ИдентификаторЗадания", ИдентификаторЗадания), ЭтаФорма);
	
	//ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	//ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	// //ПараметрыВыполнения.АдресРезультата = АдресРезультатаФоновогоЗадания; // всегда используем одно и то же временное хранилище

	// ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, "Справочники.УБ_Цели.УстановитьОтборСпискаВФоне",
	// 										ЭтотОбъект);
	 
	 
КонецПроцедуры	 


//7.3.1.2. Ограничения и особенности
	
//При установке отбора в динамическом списке следует помнить, 
//что отбор не действует на группы, если для динамического списка выбран режим отображения Иерархический список или Дерево. 
//	Под «группами» понимается элемент справочника или плана видов характеристик, у которого свойство ЭтоГруппа установлено в значение Истина.	

&НаСервере
Функция УстановитьОтборСпискаВФоне(Форма) Экспорт

	Если Форма.РежимСпискаЦелейПоГруппам Тогда
		Если Не Форма.ВывестиЦелиСтатусом = "Все" Тогда 		
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "СостояниеЦели", Форма.ВывестиЦелиСтатусом);
		Иначе
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма.Список, "СостояниеЦели");
		КонецЕсли;       
		
		Если НЕ ЗначениеЗаполнено(Форма.ОтборГруппыТекущая) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма.Список, "Родитель");	
		Иначе	
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "Родитель", Форма.ОтборГруппыТекущая,
																				ВидСравненияКомпоновкиДанных.ВИерархии, "Родитель", ЗначениеЗаполнено(Форма.ОтборГруппыТекущая));	
		КонецЕсли;  
		
		Если НЕ ЗначениеЗаполнено(Форма.ОтборПринадлежностиТекущая)
			и НЕ ЗначениеЗаполнено(Форма.ПредопределенныйОтбор) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Форма.Список, "ПринадлежностьЦели");
		ИначеЕсли ЗначениеЗаполнено(Форма.ОтборПринадлежностиТекущая) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "ПринадлежностьЦели", Форма.ОтборПринадлежностиТекущая,
																					ВидСравненияКомпоновкиДанных.ВИерархии, "ПринадлежностьЦели", ЗначениеЗаполнено(Форма.ОтборПринадлежностиТекущая));	
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "ПринадлежностьЦели", Форма.ПредопределенныйОтбор,
																				ВидСравненияКомпоновкиДанных.ВИерархии, "ПринадлежностьЦели", ЗначениеЗаполнено(Форма.ПредопределенныйОтбор));	
		КонецЕсли;
	Иначе 
		УстановитьОтборДереваПоПринадлежностиВФоне(Форма);
	КонецЕсли;	
	
	
КонецФункции

&НаСервере
Процедура УстановитьОтборДереваПоПринадлежностиВФоне(Форма) Экспорт
	
	ИмяДереваИсточника = "СписокПоПринадлежности";
	Отборы = Новый Структура;      
	РодителиКУдалению = Новый Массив;
	
	ВключеноОтборов = 0;
	
	// Надо снять отбор
	ДеревоКопия = Форма.РеквизитФормыВЗначение(ИмяКопииДереваЗаказа(ИмяДереваИсточника));
	ДеревоЗаказа = Форма.РеквизитФормыВЗначение("СписокПоПринадлежности");
	ДеревоЗаказа = ДеревоКопия.Скопировать(); // Замещаем основное дерево, данными из копии
	
	Если ЗначениеЗаполнено(Форма.ОтборГруппыТекущая) Тогда
		Отборы.Вставить("ОтборГруппыТекущая", Форма.ОтборГруппыТекущая );
		ВключеноОтборов = ВключеноОтборов+1;																			
	КонецЕсли;  
		
	Если ЗначениеЗаполнено(Форма.ОтборПринадлежностиТекущая) Тогда
		Отборы.Вставить("ОтборПринадлежностиТекущая", Форма.ОтборПринадлежностиТекущая);
		ВключеноОтборов = ВключеноОтборов+1;																			
	КонецЕсли;
	    
	Если ВключеноОтборов <= 0 Тогда
		Форма.ЗначениеВРеквизитФормы(ДеревоЗаказа, "СписокПоПринадлежности"); // Возвращаем данные на форму
		Возврат;
	КонецЕсли;
	
	
	УдалитьНенужныеРекурсивно(Форма, Отборы, ДеревоЗаказа.Строки, РодителиКУдалению);
	Для Каждого Родитель Из РодителиКУдалению Цикл
		Попытка                            
			ВладелецУровня = Родитель.Родитель;
			//может оказаться, что строка уже удалена
			Если ЗначениеЗаполнено(ВладелецУровня) Тогда
				ВладелецУровня.Строки.Удалить(Родитель);	
			Иначе
				ДеревоЗаказа.Строки.Удалить(Родитель);		
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	
	Форма.ЗначениеВРеквизитФормы(ДеревоЗаказа, "СписокПоПринадлежности"); // Передаем на форму, наше обновленное дерево

КонецПроцедуры 

Процедура УдалитьНенужныеРекурсивно(Форма, Отборы, Родители, РодителиКУдалению)
	
	Для Каждого ТекРодитель Из Родители Цикл
		
		СтрокаРодителяСоответствуетОтбору = Истина;
		
		Если Отборы.Свойство("ОтборГруппыТекущая") 
			и ТипЗнч( ТекРодитель.Значение) = Тип("СправочникСсылка.УБ_Цели") 
			и Не ТекРодитель.Значение.ПринадлежитЭлементу(Форма.ОтборГруппыТекущая) Тогда
		
			СтрокаРодителяСоответствуетОтбору = Ложь;
			
		КонецЕсли; 
		
		Если СтрокаРодителяСоответствуетОтбору и Отборы.Свойство("ОтборПринадлежностиТекущая") Тогда
			Если ТипЗнч(Форма.ОтборПринадлежностиТекущая) = Тип("СправочникСсылка.СтруктураПредприятия") 
				и ТипЗнч(ТекРодитель.Значение) = Тип("СправочникСсылка.СтруктураПредприятия") 
				и Не ТекРодитель.Значение.ПринадлежитЭлементу(Форма.ОтборПринадлежностиТекущая)
				и Не ТекРодитель.Значение = Форма.ОтборПринадлежностиТекущая Тогда
				СтрокаРодителяСоответствуетОтбору = Ложь;
			ИначеЕсли ТипЗнч(ТекРодитель.Значение) = Тип("СправочникСсылка.УБ_Цели") 
				и Форма.ОтборПринадлежностиТекущая = Справочники.УБ_Компании.Компания 
				и Не ТекРодитель.Значение.ПринадлежностьЦели	= Форма.ОтборПринадлежностиТекущая Тогда
				СтрокаРодителяСоответствуетОтбору = Ложь;
			ИначеЕсли ТипЗнч(ТекРодитель.Значение) = Тип("СправочникСсылка.УБ_Цели") 
				и Не ТекРодитель.Значение.ПринадлежностьЦели	= Форма.ОтборПринадлежностиТекущая Тогда
				СтрокаРодителяСоответствуетОтбору = Ложь;
			КонецЕсли;

		КонецЕсли;
		
		Если Не СтрокаРодителяСоответствуетОтбору Тогда
			РодителиКУдалению.Добавить(ТекРодитель);              
			УдалитьНенужныеРекурсивно(Форма, Отборы, ТекРодитель.Строки, РодителиКУдалению);
		Иначе
			ОтменитьУдалениеРекурсивно(РодителиКУдалению, ТекРодитель);
			УдалитьНенужныеРекурсивно(Форма, Отборы, ТекРодитель.Строки, РодителиКУдалению);
			//всех, кто оказался уровнем выше - не удалеяем
		КонецЕсли;		
		
	КонецЦикла;	  
	

КонецПроцедуры     

Процедура ОтменитьУдалениеРекурсивно(РодителиКУдалению, ТекРодитель)
	
	РодительКОтмене = ТекРодитель.Родитель;    
	Если РодительКОтмене = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = РодителиКУдалению.Найти(РодительКОтмене);          
	Если Не Элемент = Неопределено Тогда
		РодителиКУдалению.Удалить(Элемент);
	КонецЕсли;
	ОтменитьУдалениеРекурсивно(РодителиКУдалению, РодительКОтмене)
	
КонецПроцедуры




&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.СостояниеЦели");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.УБ_СостоянияПоказателейЭффективности.Архивный;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Список");
	ЗачеркнутыйШрифт = Новый Шрифт(,,,,, Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЗачеркнутыйШрифт);
	
КонецПроцедуры

#КонецОбласти

#Область ОтборВСпискеПоПринадлежности 

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКопииДереваЗаказа(ИмяДереваЗначениеа)
	
	Возврат "Копия"+ИмяДереваЗначениеа;
	
КонецФункции

&НаСервере
Процедура СоздатьНовоеПустоеДеревоКопированием(ИмяДереваЗначениеа)
	
	Если  Не ПолучитьРеквизиты().Найти(ИмяКопииДереваЗаказа(ИмяДереваЗначениеа)) = Неопределено Тогда  
		// Дерево есть, создавать не надо
		Возврат;	
	КонецЕсли; 
	

	// Так как возникло исключение и мы попалю сюда, то копии дерева нету
	ДеревоИсходник = РеквизитФормыВЗначение("СписокПоПринадлежности");
	МассивДобавленныхРеквизитов = Новый Массив;
	НовоеДерево = Новый РеквизитФормы(ИмяКопииДереваЗаказа(ИмяДереваЗначениеа), Новый ОписаниеТипов("ДеревоЗначений"));
	МассивДобавленныхРеквизитов.Добавить(НовоеДерево);
	
	Для Каждого ТекКол Из ДеревоИсходник.Колонки Цикл
		
		Колонка = Новый РеквизитФормы(ТекКол.Имя, ТекКол.ТипЗначения, ИмяКопииДереваЗаказа(ИмяДереваЗначениеа));
		МассивДобавленныхРеквизитов.Добавить(Колонка);
		
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивДобавленныхРеквизитов);
	ДеревоИсходник = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьДерево(ИмяДереваЗначениеа)
	
	ДеревоЗначение = ЭтотОбъект[ИмяДереваЗначениеа];
	ИмяРеквизитаНазначение = ИмяКопииДереваЗаказа(ИмяДереваЗначениеа);
	СоздатьНовоеПустоеДеревоКопированием(ИмяДереваЗначениеа);
	
	ДеревоКопия = ДанныеФормыВЗначение(ДеревоЗначение, Тип("ДеревоЗначений")).Скопировать();
	ЗначениеВРеквизитФормы(ДеревоКопия, ИмяРеквизитаНазначение);	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДереваПоПринадлежности()   
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
 	//ПараметрыВыполнения.АдресРезультата = АдресРезультатаФоновогоЗадания; // всегда используем одно и то же временное хранилище

 	ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, "Справочники.УБ_Цели.УстановитьОтборДереваПоПринадлежностиВФоне",
     										ЭтотОбъект);

	//ИмяДереваИсточника = "СписокПоПринадлежности";
	//Отборы = Новый Структура;      
	//РодителиКУдалению = Новый Массив;
	//
	//ВключеноОтборов = 0;
	//
	//// Надо снять отбор
	//ДеревоКопия = РеквизитФормыВЗначение(ИмяКопииДереваЗаказа(ИмяДереваИсточника));
	//ДеревоЗаказа = РеквизитФормыВЗначение("СписокПоПринадлежности");
	//ДеревоЗаказа = ДеревоКопия.Скопировать(); // Замещаем основное дерево, данными из копии
	//
	//Если ЗначениеЗаполнено(ОтборГруппыТекущая) Тогда
	//	Отборы.Вставить("ОтборГруппыТекущая",ОтборГруппыТекущая );
	//	ВключеноОтборов = ВключеноОтборов+1;																			
	//КонецЕсли;  
	//	
	//Если ЗначениеЗаполнено(ОтборПринадлежностиТекущая) Тогда
	//	Отборы.Вставить("ОтборПринадлежностиТекущая", ОтборПринадлежностиТекущая);
	//	ВключеноОтборов = ВключеноОтборов+1;																			
	//КонецЕсли;
	//    
	//Если ВключеноОтборов <= 0 Тогда
	//	ЗначениеВРеквизитФормы(ДеревоЗаказа, "СписокПоПринадлежности"); // Возвращаем данные на форму
	//	Возврат;
	//КонецЕсли;
	//
	//
	//УдалитьНенужныеРекурсивно(Отборы, ДеревоЗаказа.Строки, РодителиКУдалению);
	//Для Каждого Родитель Из РодителиКУдалению Цикл
	//	Попытка                            
	//		ВладелецУровня = Родитель.Родитель;
	//		//может оказаться, что строка уже удалена
	//		Если ЗначениеЗаполнено(ВладелецУровня) Тогда
	//			ВладелецУровня.Строки.Удалить(Родитель);	
	//		Иначе
	//			ДеревоЗаказа.Строки.Удалить(Родитель);		
	//		КонецЕсли;
	//	Исключение
	//	КонецПопытки;
	//КонецЦикла;
	//
	//
	//ЗначениеВРеквизитФормы(ДеревоЗаказа, "СписокПоПринадлежности"); // Передаем на форму, наше обновленное дерево

КонецПроцедуры  

#КонецОбласти

Функция ЭтоНазначениеЦели(Значение) Экспорт
	
	Возврат ТипЗнч(Значение) = Тип ("СправочникСсылка.СтруктураПредприятия") 
				или ТипЗнч(Значение) = Тип("СправочникСсылка.УБ_Компании");
		
КонецФункции

 
КэшСостоянияДерева = Новый Соответствие;
